!<arch>
0-isupper.c/    0           0     0     644     220       `
#include "main.h"
/**
 *_isupper - checks for upewrcase.
 *@c: argument being checked.
 *Return: 1 if uppercase.
 *	  0 if not.
 */

int _isupper(int c)
{
	while (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}
0-memset.c/     0           0     0     644     344       `
#include "main.h"

/**
 * _memset - fills memory with constant bye.
 * @s: memory area to fill.
 * @b: constant byte.
 * @n: number of bytes to be filled.
 * Return: final s value
*/

char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;
	unsigned int index;

	for (index = 0; index < n; index++)
	{
		*p = b;
		p++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     386       `
#include "main.h"

/**
 *_strcat - concantinates two strings.
 *@dest: arg to be concantinated to.
 *@src: arg to concantinate.
 *Return: pointer to resulting string dest (home).
 */

char *_strcat(char *dest,  char *src)
{
	char *final = dest;

	while (*final != '\0')
	{
		final++;
	}
	while (*src != '\0')
	{
		*final = *src;
		src++;
		final++;
	}
	*final = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     383       `
#include "main.h"
/**
 *_atoi - conert string to intager
 *@s: pointer to string.
 *Return: 0 if numeric.
 */

int _atoi(char *s)
{
	int scheise = 1;

	while (*s != '\0')
	{
		if (*s <= '9' && *s >= '0')
		{
			*s = *s * 10 + (*s - '0');
		}
		else if (*s == '-')
		{
			scheise = -1;
		}
		else if (*s != ' ' && *s != '-')
		{
			return (0);
		}
		s++;
	}
	return (*s * scheise);
}

1-isdigit.c/    0           0     0     644     206       `
#include "main.h"
/**
 *_isdigit - checks for digit.
 *@c: rgument to check.
 *Return: 1 if digit.
 *	  0 if not.
 */

int _isdigit(int c)
{
	while (c >= '0' && c <= '9')
	{
		return (1);
	}
	return (0);
}
1-memcpy.c/     0           0     0     644     349       `
#include "main.h"

/**
 * _memcpy - copies a memory area.
 * @dest: copy destination.
 * @src: source
 * @n: number of bytes to copy.
 * Return: final dest value
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *p = dest;
	unsigned int index;

	for (index = 0; index < n; index++)
	{
		*p = *src;
		p++;
		src++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     432       `
#include "main.h"

/**
 * _strncat - concantenates two strings.
 * @dest: arg to concantinate to.
 * @src: arg to concantinate from.
 * @n: arg to poitn out number of bytes.
 * Return: (dest) poiner to original start dest.
*/

char *_strncat(char *dest, char *src, int n)
{
	char *home = dest;
	char *away = src;


	while (*away != '\0' && n > 0)
	{
		*home = *away;
		home++;
		away++;
		n--;
	}

	*home = '\0';
	return (dest);

}
2-strchr.c/     0           0     0     644     348       `
#include "main.h"

/**
 * _strchr - locates a character in a string.
 * @s: subject stirng.
 * @c: character to look for.
 * Return: pointer to first occurence.
 *			NULL if not present.
*/

char *_strchr(char *s, char c)
{
	char *point = s;

	while (*point != '\0')
	{
		if (*point == c)
		{
			return (point);
		}
		point++;
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     320       `
#include "main.h"

/**
 *_strlen - grts string length.
 *@s: string argument
 *Return: length.
 *(*s != '\0'): iterate throught each char while it's not null.
 *len: a counter throught the strin array positions/index.
 */

int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		s++;
		len++;
	}
	return (len);
}
3-islower.c/    0           0     0     644     213       `
#include "main.h"
/**
 *_islower - informs lower case characters.
 *@c: character for checking.
 *Return: 1 for true value
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     181       `
#include "main.h"

/**
 *_puts - prints string.
 *@str: string arg to print.
 */

void _puts(char *str)
{

	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     338       `
#include "main.h"

/**
 * _strcmp - compartes string.
 * @s1: argument 1.
 * @s2: argument 2.
 * Return: difference.
*/

int _strcmp(char *s1, char *s2)
{
	int difference = 0;

	while (*s1 != '\0' && *s2 != '\0')
	{
		if (*s1 != *s2)
		{
			difference = (*s1 - *s2);
			return (difference);
		}
		s1++;
		s2++;
	}
	return (difference);
}
3-strspn.c/     0           0     0     644     472       `
#include "main.h"

/**
 * _strspn - gets length of prefix substring.
 * @s: target.
 * @accept: trigger.
 * Return: bytes.
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int byte = 0;
	char *originalAccept = accept;

	while (*s != '\0')
	{
		int flag = 0;

		while (*accept != '\0')
		{
			if (*s == *accept)
			{
				flag = 1;
				break;
			}
			accept++;
		}

		if (!flag)
		{
			break;
		}

		byte++;
		s++;
		accept = originalAccept;
	}
	return (byte);
}
4-isalpha.c/    0           0     0     644     261       `
#include "main.h"
/**
 *_isalpha - Checks for alphabets.
 *@c: the char to be checked.
 *Return: 0 when untrue. 1 when true.
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     410       `
#include "main.h"

/**
 * _strpbrk - searches for a set of bytes.
 * @s: target string.
 * @accept: subject of refference
 * Return: poiner to s or Null if unfatched
*/

char *_strpbrk(char *s, char *accept)
{
	char *resetAccept = accept;

	while (*s != '\0')
	{
		while (*accept != '\0')
		{
			if (*s == *accept)
			{
				return (s);
			}
			accept++;
		}
		accept = resetAccept;
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     578       `
#include "main.h"

/**
 * _strstr - finds needle in a haystack.(substring in a string)
 * @haystack: the target string.
 * @needle: the substring.
 * Return: pointer to beginning of substring.
 *			Null if absent
*/

char *_strstr(char *haystack, char *needle)
{
	char *haystackPtr = haystack;

	while (*haystackPtr != '\0')
	{
		char *needlePtr = needle;

		while (*needlePtr != '\0' && *haystackPtr == *needlePtr)
		{
			haystackPtr++;
			needlePtr++;
		}
		if (*needlePtr == '\0')
		{
			return (haystackPtr - (needlePtr - needle));
		}
		haystackPtr++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     303       `
#include "main.h"
/**
 *_abs - prints the absolute value of a number.
 *Return: val when successful.
 *@arg: the type to input.
 */

int _abs(int arg)
{
	if (arg < 0)
	{
		int val = arg * -1;

		return (val);
	}
	else if (arg > 0)
	{
		int val = arg * 1;

		return (val);
	}
	else
	{
		return (0);
	}
}

9-strcpy.c/     0           0     0     644     317       `
#include "main.h"

/**
 *_strcpy - copy a string to a destination.
 *@dest: destination of copied string.
 *@src: source of copied string.
 *Return: home.
 */

char *_strcpy(char *dest, char *src)
{
	char *home = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';

	return (home);
}

_putchar.c/     0           0     0     644     265       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

